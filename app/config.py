import os, requests

ACCENT_URL = os.getenv("ACCENT_URL", "")
API_TOKEN = os.getenv("API_TOKEN", "")

API_ID = int(os.getenv("API_ID", "0"))
API_HASH = os.getenv("API_HASH", "")
BOT_TOKEN = os.getenv("BOT_TOKEN", "")

FISH_API_KEY = os.getenv("FISH_API_KEY", "")

PG_HOST = os.getenv("PG_HOST", "postgres")
PG_PORT = int(os.getenv("PG_PORT", "5432"))
PG_USER = os.getenv("POSTGRES_USER", "postgres")
PG_PASSWORD = os.getenv("POSTGRES_PASSWORD", "postgres")
PG_DB = os.getenv("POSTGRES_DB", "postgres")

REDIS_URL = os.getenv("REDIS_URL", "redis://redis:6379/0")
GRADIO_URL = os.getenv("GRADIO_URL")

FREE_CREDITS_PER_DAY = int(os.getenv("FREE_CREDITS_PER_DAY", "1"))

OUTPUT_DIR = os.path.join("/out")
REFS_DIR = os.path.join("/refs")
REF_VOICE_1 = os.getenv("REF_VOICE_1", "/refs/ref_1.ogg")
REF_VOICE_2 = os.getenv("REF_VOICE_2", "/refs/ref_2.ogg")

YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID", "")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY", "")
ROBOKASSA_LOGIN = os.getenv("ROBOKASSA_LOGIN", "")
ROBOKASSA_PASS_1 = os.getenv("ROBOKASSA_PASS_1", "")
ROBOKASSA_PASS_2 = os.getenv("ROBOKASSA_PASS_2", "")
ROBOKASSA_TEST_PASS_1 = os.getenv("ROBOKASSA_TEST_PASS_1", "")
ROBOKASSA_TEST_PASS_2 = os.getenv("ROBOKASSA_TEST_PASS_2", "")
ROBOKASSA_RESULT_URL = os.getenv("ROBOKASSA_RESULT_URL", "")


TELEGRAM_PROVIDER_TOKEN = os.getenv(
    "TELEGRAM_PROVIDER_TOKEN", ""
)  # optional (BotFather)
RUB_PER_MIN = float(os.getenv("RUB_PER_MIN", "13"))  # price per 1 credit
STARS_PER_MIN = float(os.getenv("STARS_PER_MIN", "8"))  # price per 1 credit
STARS_TEST = os.getenv("STARS_TEST", "0") == "1"
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "https://example.com")  # for return URLs

WORKER_NUMBER = int(os.getenv("WORKER_NUMBER", "1"))

DIRECTUS_URL = os.environ.get("DIRECTUS_URL")
DIRECTUS_TOKEN = os.environ.get("DIRECTUS_TOKEN")
DIRECTUS_COLLECTION = os.environ.get("DIRECTUS_SETTINGS_COLLECTION", "settings")
ELEVENLABS_API_KEY = os.environ.get("ELEVENLABS_API_KEY", "settings")
VC_PROXY_API_KEY = os.environ.get("VC_PROXY_API_KEY")
VC_PROXY_BACKEND_URL = os.environ.get("VC_PROXY_BACKEND_URL")


HELP_TEXT = (
    "<b>–ü—Ä–∏–≤–µ—Ç!</b> üëã\n"
    "–Ø ‚Äî <b>TTS-–±–æ—Ç</b> üéôÔ∏è\n\n"
    "<b>–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1 –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –º–∏–Ω—É—Ç—É –≤ –º–µ—Å—è—Ü.</b>\n\n"
    "–î–æ—Å—Ç—É–ø–Ω—ã 2 –º–æ–¥–µ–ª–∏ <b>F5-TTS –∏ OpenAudio S1</b>. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è F5-TTS.\n\n"
    "<b>–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å-–≥–æ–ª–æ—Å:</b>\n"
    "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–∞—É–¥–∏–æ-—Ñ–∞–π–ª</b> –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ <b>–≥–æ–ª–æ—Å–æ–≤–æ–µ</b>.\n\n"
    "<b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏:</b>\n"
    "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ç–µ–∫—Å—Ç</b>.\n\n"
    "<b>–ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å —É–¥–∞—Ä–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ–ª–∏ F5-TTS):</b>\n"
    "–°—Ç–∞–≤—å—Ç–µ <code>+</code> –ø–µ—Ä–µ–¥ –±—É–∫–≤–æ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É–¥–∞—Ä–µ–Ω–∏–µ.\n"
    "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>–º–æ–ª–æ–∫+–æ</code>\n\n"
    "<b>–ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –ø–∞—É–∑—É:</b>\n"
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <code>[–ø–∞—É–∑–∞ n]</code>, –≥–¥–µ <b>n</b> ‚Äî –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.\n"
    "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>–ü—Ä–∏–≤–µ—Ç [–ø–∞—É–∑–∞ 1] –∫–∞–∫ –¥–µ–ª–∞?</code>\n\n"
    "<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:</b>\n"
    "- <code>/—Å—Ç–∞—Ä—Ç</code> –∏–ª–∏ <code>/–º–µ–Ω—é</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
    "- <code>/–ø–æ–º–æ—â—å</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å <b>—ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</b>\n"
    "- <code>/–≤—ã–±—Ä–∞—Ç—å_–º–æ–¥–µ–ª—å</code> ‚Äî <b>–≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å</b> –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ (F5-TTS –∏–ª–∏ OpenAudio S1)\n"
    "- <code>/–≤—ã–±—Ä–∞—Ç—å_–≥–æ–ª–æ—Å</code> ‚Äî <b>–≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å</b> –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞\n"
    "- <code>/–∫—É–ø–∏—Ç—å_–º–∏–Ω—É—Ç—ã</code> ‚Äî <b>–ø–æ–ø–æ–ª–Ω–∏—Ç—å –º–∏–Ω—É—Ç—ã</b>\n"
    "- <code>/–±–∞–ª–∞–Ω—Å</code> ‚Äî —É–∑–Ω–∞—Ç—å <b>—Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</b>\n"
    "- <code>/ogg</code> ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∫ <b>–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
    "- <code>/mp3</code> ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∫ <b>mp3 —Ñ–∞–π–ª</b>\n"
    "- <code>/–≤–∫–ª_–∞–≤—Ç–æ—É–¥–∞—Ä–µ–Ω–∏–µ</code> ‚Äî –í–∫–ª—é—á–∏—Ç—å <b>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Ç–∞–Ω–æ–≤–∫—É —É–¥–∞—Ä–µ–Ω–∏–π</b>\n"
    "- <code>/–≤—ã–∫–ª_–∞–≤—Ç–æ—É–¥–∞—Ä–µ–Ω–∏–µ</code> ‚Äî –í—ã–∫–ª—é—á–∏—Ç—å <b>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Ç–∞–Ω–æ–≤–∫—É —É–¥–∞—Ä–µ–Ω–∏–π</b>\n\n"
    "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å/—Å–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ: https://t.me/ask_garage\n"
    "–ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ: https://t.me/a1manz001"
)


def load_settings_from_directus():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Directus –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
    –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è (config.py).
    """

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è –≤–æ–æ–±—â–µ –∑–∞–¥–∞–Ω—ã
    if not DIRECTUS_URL or not DIRECTUS_COLLECTION:
        print(
            "DIRECTUS_URL –∏–ª–∏ DIRECTUS_COLLECTION –Ω–µ –∑–∞–¥–∞–Ω—ã. "
            "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è/–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
        )
        return

    api_url = f"{DIRECTUS_URL}/items/{DIRECTUS_COLLECTION}"
    headers = {}

    if DIRECTUS_TOKEN:
        headers["Authorization"] = f"Bearer {DIRECTUS_TOKEN}"

    print(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ Directus: {api_url}")

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π requests, –∫–∞–∫ –≤—ã –∏ –ø—Ä–æ—Å–∏–ª–∏
        response = requests.get(api_url, headers=headers, timeout=5)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ (4xx, 5xx)
        response.raise_for_status()

        data = response.json()

        print(data)
        if "data" not in data:
            print(
                "–û—Ç–≤–µ—Ç –æ—Ç Directus –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'data' –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç. "
                "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        directus_settings = data["data"]

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º —ç—Ç–æ–≥–æ (config.py) –º–æ–¥—É–ª—è
        current_module_globals = globals()

        updated_vars = []
        # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å
        for key, value in directus_settings.items():
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á –∏–∑ Directus (–Ω–∞–ø—Ä. 'rub_per_min')
            # –≤ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥–∞ (–Ω–∞–ø—Ä. 'RUB_PER_MIN')
            var_name = key.upper()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ config.py
            if var_name in current_module_globals:
                if value is None:
                    print(
                        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{var_name}' (–ø–æ–ª–µ '{key}') –∏–∑ Directus –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ None. "
                        f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_module_globals[var_name]}"
                    )
                    continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô —Ç–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (int, float, str)
                    original_type = type(current_module_globals[var_name])

                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Directus –∫ —ç—Ç–æ–º—É —Ç–∏–ø—É
                    # –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã '13.0' (str) —Å—Ç–∞–ª 13.0 (float)
                    new_value = original_type(value)

                    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                    current_module_globals[var_name] = new_value
                    updated_vars.append(
                        f"{var_name} = {new_value} (—Ç–∏–ø: {original_type.__name__})"
                    )

                except (ValueError, TypeError) as e:
                    # –û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—ã—Ç–∞–µ–º—Å—è 'abc' –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ int)
                    print(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É {var_name}: "
                        f"–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ '{value}' "
                        f"–∫ —Ç–∏–ø—É {original_type.__name__}. –û—à–∏–±–∫–∞: {e}"
                    )
                except Exception as e:
                    print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {var_name}: {e}")

        if updated_vars:
            print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Directus —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:")
            for var_info in updated_vars:
                print(f"  -> {var_info}")
        else:
            print(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Directus –∑–∞–≥—Ä—É–∂–µ–Ω—ã, "
                "–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤ config.py."
            )

    except requests.exceptions.RequestException as e:
        print(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Directus: {e}. "
            "–ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
        )
    except Exception as e:
        print(
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Directus: {e}. "
            "–ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
        )


# --- –í–´–ü–û–õ–ù–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò –ü–†–ò –ò–ú–ü–û–†–¢–ï ---
# –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –æ–¥–∏–Ω —Ä–∞–∑, –∫–æ–≥–¥–∞ bot.py —Å–¥–µ–ª–∞–µ—Ç 'import config'
load_settings_from_directus()
